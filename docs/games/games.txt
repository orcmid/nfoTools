games.txt 0.0.12                    UTF-8                         2023-10-20
*---|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*


                        nfoWare/nfoWorks nfoTools
                        =========================

    <https://github.com/orcmid/nfoTools/blob/master/docs/games/games.txt>
        <https://orcmid.github.io/nfoTools/games/games.txt>

                          NFOTOOLS PROJECT GAMES
                          ----------------------

    nfoTools docs/games/ is a collection of material on games.  Not so much
    gamedev, but using games, finding games, finding gamers, and so on. Actual
    game development surfaces under docs/dev/ and, for significant games,
    under their own projects.  Well maybe, maybe not.

    The pattern of chronological cataloguing is on the same pattern as other
    documentation sections, using G-prefixed folios/pages.

MANIFEST

    games.txt
          this manifest and job-jar file
    index.md
          the entrace and catalog for games material


*---|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*

                    Copyright 2021-2023 Dennis E. Hamilton

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

*---|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*

 ATTRIBUTION

   Hamilton, Dennis E. nfoTools Project Games.  nfoTools file games.txt
   version 0.0.12 dated 2023-10-20, available on the Internet as a version of
   <https://orcmid.github.io/nfoTools/games/games.txt>

TODO

 * Migrate items on games here, although this is about finding and playing
   them, generally not constructing them (unless that's the game).

 * What about other recreational computing?  Then it is like fun or fun &
   games.  Think it over.

 * Inventory existing games material for potential treatment here.

 * Need to distinguish games and gaming and gamedev?

 * Scrounge my OneNote collection on gaming and adventuring

 * Tie into Azure Gaming including the Cognitive Services Reference
   Architecture,
   <https://docs.microsoft.com/en-us/gaming/azure/reference-architectures/cognitive>

 * Also the 5 key properties of a good game.  These will all influence the
   progression of Adv10.

 * So I am definitely crossed up about this being for games and also gamedev?
   Follow my own advice and move gaming items to nfoTools/docs/dev.

 * For beginners through advanced, gamedev.tv is a great resource.  Feature
   these two:
   <https://www.gamedev.tv/courses/extra/lectures/20006195>
   and <https://www.gamedev.tv/courses/extra/lectures/12335656>.
   The second, on learning an engine is appropriate to learning C/C++ and
   learning how to work builds before, if interested, having Visual Studio
   do that for you.

 * https://blog.gamedev.tv/a-story-about-having-two-kids-a-full-time-job-and-no-game-development-experience-selling-a-game-around-the-world-in-14-months-during-a-pandemic/
   This is useful to the extent the trials and tribulations are important, as
   is the particular vision.  Might need some related ones.

 * The basic idea of games as simple development projects for honing ones
   skills.  Link to raylib usage as well as simple Command-prompt text-based
   games.

 * There is this Open CoureWare from MIT
   <https://www.ocw-openmatters.org/2015/12/11/getting-serious-about-video-games/>
   on this course,
   <https://ocw.mit.edu/courses/cms-611j-creating-video-games-fall-2014/>.

 * Game Project Management Tools,
   <https://pinglestudio.com/blog/co-development/best-game-project-management-tools-for-game-developers>
   apparently gigantic URLs because they can

 * Codecademy has an Introduction to Game Development that may be an useful
   overview.  I haven't checked out the 4 hour course.
   <https://www.codecademy.com/learn/introduction-to-game-development>.

 * Codecademy also discusses choice of programming languages for game
   development.  I think C before C++ also works in this context.  There
   might need to be a cross-link on Learning C.
   <https://www.codecademy.com/resources/blog/programming-languages-for-game-development/>

 * This is an interesting account of how one person found their way into the
   gaming industry.  It promotes the Codecademy Introduction.  The money quote
   about the players not being the same as the designers is buried pretty
   deep.
   <https://www.codecademy.com/resources/blog/cool-coding-job-game-designer-kerbal-space-program/>

 * I was reminded by a tweet from Codecademy that building a chess game is
   a great way to get into game programming.  It is also interesting as a
   model-view-controller setup.  I am most interested in the model and what
   I had been thinkng in my CP/M-80 days for managing the board and the move
   tree, recognizing duplicates, etc.  I just started musing recognition of
   transpositions and repetitions [;<).

 * Beside gamedev.tv (and udemy), plus Discord, there is also a great
   compilation of Mastodon gaming-related instances put together by a great
   tutorial writer.
   <https://docs.google.com/spreadsheets/d/e/2PACX-1vTr9cr3fzEUTaTRSXo0oVE_FI1eW2kTDlub4RcZm13FX0G2UE_cbnixPTT2SeiSG9369suPVJo4FVHz/pubhtml>.
   (The Google docs URLs are wild)

 * With regard to Unity, Visial Studio integration, and probably C++ there are
   <https://developer.microsoft.com/en-us/games/blog/havok-physics-for-unity-is-now-production-ready/>

 * Also DirectX which should work in VC/C++,
   <https://learn.microsoft.com/en-us/windows/win32/directx>

 * And for mixed-reality, including iOS ARKit and Android ARCore, with Azure
   <https://learn.microsoft.com/en-us/azure/spatial-anchors/overview>

 * I need to get more clear at promoting things that I have experience with.
   I can mention other sources but make it clear they are not endorsements.

 * <https://www.gamedev.tv/> is a good resource, but not recommended for
   learning a programming language.  I recommend teething on programming
   languages with very simple (e.g., command-line) games.  The progression
   that Adv10 is part of could be informative but it is a bit large.

 * <https://www.codecademy.com/resources/blog/5-ways-to-build-a-mini-game/>
   although it misses raylib and probably others.  Some of the statements,
   such as proximity of Python to English suggest a certain lack of competence
   and reason to be cautious.

 * <https://www.udemy.com/course/cpp-fundamentals/> C++ Fundamentals: Game
   Programming For Beginners.  This course is not precisely about C++.  It
   uses C Language for the basics and the first two sections of the course.
   Trying out this course is what led me to raylib.  VCrayApp was inspired
   to provide an alternative to the troubling installation/setup and other
   oddities of this particular course.  You can use a VCrayApp setup to do
   all of the initial programming in this course.  There are places where
   C++ is needed and you can accomplish that too with simple adjustments.

 * I just learned about babylon.js, <https://doc.babylonjs.com/>, and I am
   wondering how Babylon Native might work as a companion or alternative to
   raylib.  There's nice new physics support for one.

 * <https://learn.microsoft.com/en-us/training/paths/gaming-accessibility-fundamentals/>
   is one of many important presentations on accessibility, including for
   gaming.

 * Unity has created their own learning pathways available via their web site,
   <https://learn.unity.com/>.  This may be worthwhile.  I haven't looked deep
   enough.  It does look interesting.  Saving for future exploration.

 * <https://twitter.com/orcmid/status/1659236642090000385> and then there are
   graphics and how all the projections work, how to avoid seems appearing to
   viewers, etc.  There is a lot of lore here and it seems to cross into the
   making of animated graphics generally.

 * <https://youtu.be/Rmu_WUs-dxI> on 3 Game Dev concepts in using an AI in
   programming.  There are ways to use the AI to make yourself a better
   programmer.

 * <https://www.gamedev.tv/p/advanced-programming-workshop-2023> is useful
   for its topics.  When a video is available later, or when there is a game-
   design class that covers this material, it will be useful to learn about.

 * <https://specialeffectdevkit.info/> 7 main topics on motor accessibility
   regarding input and gameplay.  There may be more from platforms too, such
   as unity.

 * <https://pinglestudio.com/blog/co-development/best-game-project-management-tools-for-game-developers>
   This is a promotion of Pingle Studio that blogs about a number of project-
   management tools that may be useful for game developers.  A variety of them
   are Kanban-similar in their use of cards and stages.  There is no mention
   at all of Github Projects, a free alternative.

 * <https://www.youtube.com/watch?v=hAthT-r-HPs> and Blender Tutorials are
   valuable.  Also, if I use raylib, I will need to have something here around
   graphics and animations in particular.  There is a cross-over between
   dev/ and raylab/ goodies and addressing games specifically, along with
   blender and whatever else.

 * This Udemy course was apparently gifted.  It looks great for the kinds of
   things folks are talking about with regard to raylib.  "Blender Material
   Nodes Master: Create Procedural 3D Textures."
 <https://www.udemy.com/course/blender-material-nodes/learn/lecture/39493426>.

----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*

0.0.12 2023-10-20T22:07Z Pick up on some Blender Materials courses
0.0.11 2023-05-20T00:54Z Gathering more notes on resources
0.0.10 2023-05-18T16:56Z More notes, especially on animated graphics
 0.0.9 2023-05-17T19:12Z Note on gaming accessibility
 0.0.8 2023-05-15T22:28Z Quick note about babylon.js
 0.0.7 2023-05-05T19:02Z More about gamedev.tv, with caution
 0.0.6 2023-02-17T21:38Z More Links
 0.0.5 2022-12-27T17:49Z Add more connections and my interest in computer
       chess games
 0.0.4 2022-11-16T17:33Z Manage TODOs, more links and musings
 0.0.3 2022-06-21T16:47Z Manage TODOs, add some gamedev.tv links
 0.0.2 2022-02-12T16:13Z Manage TODOs, park some gaming TODOs here for now.
 0.0.1 2021-09-21T16:46Z Touch-up, manage TODOs
 0.0.0 2021-09-21T14:57Z Placeholder for development of the games section

                     ***** end of games.txt *****
