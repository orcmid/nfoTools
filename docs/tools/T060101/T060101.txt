T060101.txt 0.0.21                  UTF-8                          2023-07-31
*---|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*


                        nfoWare/nfoWorks nfoTools
                        =========================

<https://github.com/orcmid/nfoTools/blob/master/docs/tools/T060101/T060101.txt>
      <https://orcmid.github.io/nfoTools/tools/T060101/T060101.txt>

                       T060101: C/C++ PROGRAMMING
                       --------------------------

MANIFEST

    T060101.txt  this manifest and job-jar file
      index.md   front porch published as orcmid.github.io/nfoTools/T060101/

          a/     T060101a: nfoWare t060101a Diary & Job Jar (legacy)
          b/     T060101b: Resources
          c/     T060101c: Getting to "Hello"
          d/     T060101d: Hello, What's Happening Here?

*---|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*

                     Copyright 2021-2023 Dennis E. Hamilton

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

*---|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*

 ATTRIBUTION

   Hamilton, Dennis E. T060101: C/C++ Programming.  nfoTools project text
   file T060101.txt version 0.0.21 dated 2023-07-31, available on the
   Internet as a version of
   <https://orcmid.github.io/nfoTools/tools/T060101/T060101.txt>

TODO

 * Demonstrate the edit, save, compile, test, rinse-repeat

 * Watch FC_CPP Course videos and ensure that supporting materials are
   appearing here on nfoTools/docs.  Also related to the new devkits here and
   also the intro to raylib usage.

  * Here is an useful statement about the .NET languages from Microsoft,
    <https://learn.microsoft.com/en-us/dotnet/fundamentals/languages>.

  * We need a tie-in to development lifecycle.  This may end up drawing on
    Git and GitHub too.

  * Also, for game development, an area that is featured in nfoTools,
    <https://www.codecademy.com/resources/blog/programming-languages-for-game-development/>
    and tie in the ways that C is not a subset of C++ and how C code is
    used in C++ applications.  Header differences, linking differences, and
    the use of namespaces, generics, and interfaces/objects/classes.

  * Need more on alternative foundations, possibly in Notes and Skills.
    Also, general education with regard to programming.  Then why learn the
    tradition-embedded compile, link/library, execute model and its situation
    in a software-development life-cycle.

  * The fact that C is technically *not* a subset of C++ needs to be carefully
    understood.  There is a major difference in the lack of namespaces and
    in how external modules are linked.  C connects by function or data name,
    but not by signature or other type information.  In C++, generic functions
    are supported across modules.  The telling difference is in the special
    extern "C" { ... } in C language to prevent "name-mangling" when used from
    a C++ program.  The naming of headers is useful in this respect.  *.h
    headers should work in C and C++ (thanks to that gimmick) and headers
    that require C++ should use *.hpp or similar.  The absence of a filename
    extension, a Unixism, is not recommended on non-POSIX platforms.
       One might mention the #! game for telling what language a text file
    with no extension on its name happens to be.
       Mention CFront and how that all happened.
       There is also the Microsoft COM binary interface scheme and how that
    fits with C++ compilers.  Then the JNI technique for working either way.

  * Courses of potential interest:
    Introduction to Software Engineering from IBM
    <https://www.classcentral.com/course/introduction-to-software-engineering-104338>

  * With respect to why learn C, it is possible to recommend the Microsoft
    Python Learning path, with the advantage that Visual Studio Code is
    employed.  This is a very different (and also quirky) programming language
    and beginners need to appreciate that at some point.  It is not in the
    C Language "tradition" as are C++, Java, C#, and other languages (but not
    JavaScript and some others).
    <https://learn.microsoft.com/en-us/training/paths/beginner-python/>/

  * There's another good page on Codecademy, with regard to finding out how
    your characteristics and interests fit into particular areas of software
    development. <https://www.codecademy.com/explore/sorting-quiz>.  This is
    a form of vocational-interest quiz intended for newcomers.  It surveys
    your interests and views of things and how that aligns with people in
    a type of work and identifies a learning path that leads toward it.
      In my case, I arrived at "User Advocate" and that was both surprising
    and satisfying.  I have been known for that throughout my long career.
    And, indeed, I have thrived in front-end web page work and use of the
    web for writing and documentation.  THIS SHOULD BE COVERED IN A NOTES.

  * For C++ that is undifferentiated from C, there are Codecademy selections,
    <https://www.codecademy.com/resources/blog/c-plus-plus-books/>.

  * Here's a general question about choosing first programming languages,
    <https://www.codecademy.com/resources/blog/why-you-cant-choose-the-wrong-programming-language-when-you-first-start/>

 * <https://www.gamedev.tv/> is a good resource, but not recommended for
   learning a programming language.  I recommend teething on programming
   languages with very simple (e.g., command-line) games.  The progression
   that Adv10 is part of could be informative but it is a bit large.  The
   possibility here, and on Udemy, elsewhere, needs to be mentioned but with
   cautionary remarks.

 * Address why learn C and what the benefit is if one is curious enough.
    o the preprocessor, header, declaration, external reference, and library
      scheme.
    o How C libraries are workable in C++ programs.  The extern "C" business.
    o Keeping things straight with naming conventions.

 * Maybe some of this in notes?

 * Find better courses.

 * READING CODE, RUNNING CODE.  This is the experimental and practical
   art aspect of Computer Science.

 * Say something about how we are viewing abstraction above the machine.

 * I need to work through the c11 Portability issues and find all of the
   macro-specified things that are part of the standard.

 * Use the information about the optional security stuff and how it is known
   and can be employed.  Annex K of C11.

 * I need one of these just for C Language defines specified by the ISO
   standard (i.e., C11).
   o __STDC_IEC_559__ for whether or not there is conformance there
   o tests to determine whether long double is the same as double or something
     else.  And if something else, does it have more precision and at least
     the range of double.
   o Need to understand FENV_ACCESS (7.6.1) and when it comes into play

 * Move this into T060101 and systematically go through all of the Appendix J
   Portability issues and how to test for how J.1 Unspecified behaviors come
   down.
 * Some of these also require exercises to determine exactly what happens.

 * I also need to check some C++-related things when a Clean C program is
   compiled as C++ in some manner.  There seem to be differences such as the
   type of 'x' between C (int) and C++ (char).  There may be other matters.

 * The use of __STDC_LIB_EXT1___ by VS 17.x is interesting, as is setting
   __STDC_WANT_LIB_EXT1__ = 1 of interest.

*---|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*

 0.0.21 2023-07-31T19:26Z Manage TODOs
 0.0.20 2023-07-16T17:06Z Tidying Up
 0.0.19 2023-07-14T17:00Z Cleaning up TODOs
 0.0.18 2023-07-13T02:59Z More thoughts about what we are provided for
        learning to use C Language
 0.0.17 2023-06-07T19:54Z Introduct T060101d
 0.0.16 2023-05-31T20:13Z Distribute TODOs to T060101b
 0.0.15 2023-05-20T23:42Z Morph folio structure
 0.0.14 2023-05-20T19:01Z Prepare for folio restructuring, more notes
 0.0.13 2023-05-20T16:34Z More notes on filling this folio in for support of
        VCrayApp and other dev\ and tools\ work.
 0.0.12 2023-05-05T19:07Z Add cautionary note about gamedev.tv and Udemy too.
 0.0.11 2023-03-05T17:51Z Add notes about C non-subsetting C++.
 0.0.10 2023-02-14T01:07Z More TODOs, sources on other ideas than C/C++.
 0.0.9 2023-02-06T05:25Z Change rules, small touch-ups
 0.0.8 2022-12-28T05:07Z Add Rex Jaeschke citation to add to the list.
 0.0.7 2022-11-29T17:06Z Musing on the Codecademy career exploration quiz.
 0.0.6 2022-11-16T17:39Z Manage TODOs, Musings
 0.0.5 2022-10-23T17:24Z Manage TODOs
 0.0.4 2022-10-03T16:16Z Garbled TODO management
 0.0.3 2021-11-24T23:24Z T060101c and Manage TODOs
 0.0.2 2021-11-17T18:44Z Managing TODOs, Manifest
 0.0.1 2021-11-16T16:31Z Still boilerplate customization, TODOs
 0.0.0 2021-11-16T03:00Z Placeholder for addressing C/C++ lore and useful
       resources.

                     ***** end of T060101.txt *****
