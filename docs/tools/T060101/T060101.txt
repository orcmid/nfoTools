T060101.txt 0.0.12                  UTF-8                          2023-05-05
*---|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*


                        nfoWare/nfoWorks nfoTools
                        =========================

<https://github.com/orcmid/nfoTools/blob/master/docs/tools/T060101/T060101.txt>
      <https://orcmid.github.io/nfoTools/tools/T060101/T060101.txt>

                       T060101: C/C++ PROGRAMMING
                       --------------------------

[TB]


MANIFEST

    T060101.txt  this manifest and job-jar file
      index.md   front porch published as orcmid.github.io/nfoTools/T060101/

   T060101a.md   nfoWare t060101a Diary & Job Jar (legacy)
   T060101b.md   Resources
   T060101c/     Getting to "Hello"

*---|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*

                     Copyright 2021-2023 Dennis E. Hamilton

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

*---|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*

 ATTRIBUTION

   Hamilton, Dennis E. T060101: C/C++ Programming.  nfoTools project text
   file T060101.txt version 0.0.12 dated 2023-05-05, available on the
   Internet as a version of
   <https://orcmid.github.io/nfoTools/tools/T060101/T060101.txt>

TODO

 * Demonstrate the edit, save, compile, test, rinse-repeat

 * Deal with operation as part of Developer Command Prompt

 * Watch FC_CPP and ensure that supporting materials are appearing here on
   nfoTools/docs.  Also related to the new devkits here and also the intro to
   raylib usage.

  * There needs to be a good account of C vs C++ and then how to navigate the
   dependencies.  And also what language to use.  When would we want C++ and
   for that matter, why when .NET?

  * Here is an useful statement about the .NET languages from Microsoft,
    <https://learn.microsoft.com/en-us/dotnet/fundamentals/languages>.

  * Microsoft has good dccumentation on C++ and their deviations/extensions.
    Not so much for the supported C Language.  There is mention only of C89
    so the material must be seriously dated.

  * We need a tie-in to development lifecycle.  This may end up drawing on
    Git and GitHub too.

  * T060101b: Review and Update with current materials, including more on-line
    and also MOOCs of various kinds

  * T060101c: Getting to Hello will be a folio on setting up and the forever
    first program, also its take-apart.

  * T060101b: Add
    <https://www.classcentral.com/report/best-free-c-programming-courses/>

  * T060101c: Also, for C++,
    <https://www.classcentral.com/report/best-free-courses-to-learn-c/>

  * For a CS background, after or before getting feet wet with C Language,
    <https://www.classcentral.com/report/cs50-free-certificate/>.

  * Also, for game development, an area that is featured in nfoTools,
    <https://www.codecademy.com/resources/blog/programming-languages-for-game-development/>
    and tie in the ways that C is not a subset of C++ and how C code is
    used in C++ applications.  Header differences, linking differences, and
    the use of namespaces, generics, and interfaces/objects/classes.

  * Need more on alternative foundations, possibly in Notes and Skills.
    Also, general education with regard to programming.  Then why learn the
    tradition-embedded compile, link/library, execute model and its situation
    in a software-development life-cycle.

  * The fact that C is technically *not* a subset of C++ needs to be carefully
    understood.  There is a major difference in the lack of namespaces and
    in how external modules are linked.  C connects by function or data name,
    but not by signature or other type information.  In C++, generic functions
    are supported across modules.  The telling difference is in the special
    extern "C" { ... } in C language to prevent "name-mangling" when used from
    a C++ program.  The naming of headers is useful in this respect.  *.h
    headers should work in C and C++ (thanks to that gimmick) and headers
    that require C++ should use *.hpp or similar.  The absence of a filename
    extension, a Unixism, is not recommended on non-POSIX platforms.
       One might mention the #! game for telling what language a text file
    with no extension on its name happens to be.
       Mention CFront and how that all happened.
       There is also the Microsoft COM binary interface scheme and how that
    fits with C++ compilers.  Then the JNI technique for working either way.

  * Courses of potential interest:
    Introduction to Software Engineering from IBM
    <https://www.classcentral.com/course/introduction-to-software-engineering-104338>

  * Coverage of the C, C++, C#, Objective-C language relationships
    <https://www.codecademy.com/resources/blog/c-vs-cplusplus-vs-csharp-vs-objective-c/>

  * Microsoft has reorganized their on-line documentation and learning
    materials.  Getting started with C++ and C is at
    <https://learn.microsoft.com/en-us/cpp/?view=msvc-170> and I recommend

  * I recommend "Use the command-line tools" to Compile C code,
    <https://learn.microsoft.com/en-us/cpp/build/walkthrough-compile-a-c-program-on-the-command-line>

  * Also the Use C++ and C in Visual Studio Code.  This might be referenced
    here and addressed more in the Visual Studio Code materials.  There needs
    to be more emphasis on the use for C and also maybe some more gentle work
    up to the VS Code integration with Intellisence, etc.
    <https://code.visualstudio.com/docs/cpp/config-msvc>.

  * With respect to why learn C, it is possible to recommend the Microsoft
    Python Learning path, with the advantage that Visual Studio Code is
    employed.  This is a very different (and also quirky) programming language
    and beginners need to appreciate that at some point.  It is not in the
    C Language "tradition" as are C++, Java, C#, and other languages (but not
    JavaScript and some others).
    <https://learn.microsoft.com/en-us/training/paths/beginner-python/>/

  * Class Central has a great compilation on C Language programming with
    guides to the various courses.
    <https://www.classcentral.com/subject/c-programming>.

  * An useful perspective, though not great as a generalization.
    <https://twitter.com/Carnage4Life/status/1584190561787219968/photo/1>

  * <https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines> is valuable
    for C++ and sometimes for C.  It does not get at the difference between
    what the code is versus what it is for.  It does help with connection
    to what the code realizes an interpretation/representation of, though
    comments are still required.  This also came up on ResearchGate with
    respect to mechanized proofs and their checking.

  * There's another good page on Codecademy, with regard to finding out how
    your characteristics and interests fit into particular areas of software
    development. <https://www.codecademy.com/explore/sorting-quiz>.  This is
    a form of vocational-interest quiz intended for newcomers.  It surveys
    your interests and views of things and how that aligns with people in
    a type of work and identifies a learning path that leads toward it.
      In my case, I arrived at "User Advocate" and that was both surprising
    and satisfying.  I have been known for that throughout my long career.
    And, indeed, I have thrived in front-end web page work and use of the
    web for writing and documentation.  THIS SHOULD BE COVERED IN A NOTES.

  * Cite <https://en.wikibooks.org/wiki/Portability_and_the_C_Language>,
    Jaeschke, Rex.  Portability and the C Language, ed.2. Wikibooks edition
    (January 2022)available on the Internet with editing history at
    <https://en.wikibooks.org/w/index.php?title=Portability_and_the_C_Language&action=history>.
    THIS DOES NOT COVER C LANGUAGE.  It covers portability matters and it
    follows the outline of the C99 standard.  But it does not cover the
    language and it is not designed as a tutorial or a reference on that.

  * For C++ that is undifferentiated from C, there are Codecademy selections,
    <https://www.codecademy.com/resources/blog/c-plus-plus-books/>.

  * Here's a general question about choosing first programming languages,
    <https://www.codecademy.com/resources/blog/why-you-cant-choose-the-wrong-programming-language-when-you-first-start/>

 * <https://www.gamedev.tv/> is a good resource, but not recommended for
   learning a programming language.  I recommend teething on programming
   languages with very simple (e.g., command-line) games.  The progression
   that Adv10 is part of could be informative but it is a bit large.  The
   possibility here, and on Udemy, elsewhere, needs to be mentioned but with
   cautionary remarks.

*---|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*

 0.0.12 2023-05-05T19:07Z Add cautionary note about gamedev.tv and Udemy too.
 0.0.11 2023-03-05T17:51Z Add notes about C non-subsetting C++.
 0.0.10 2023-02-14T01:07Z More TODOs, sources on other ideas than C/C++.
 0.0.9 2023-02-06T05:25Z Change rules, small touch-ups
 0.0.8 2022-12-28T05:07Z Add Rex Jaeschke citation to add to the list.
 0.0.7 2022-11-29T17:06Z Musing on the Codecademy career exploration quiz.
 0.0.6 2022-11-16T17:39Z Manage TODOs, Musings
 0.0.5 2022-10-23T17:24Z Manage TODOs
 0.0.4 2022-10-03T16:16Z Garbled TODO management
 0.0.3 2021-11-24T23:24Z T060101c and Manage TODOs
 0.0.2 2021-11-17T18:44Z Managing TODOs, Manifest
 0.0.1 2021-11-16T16:31Z Still boilerplate customization, TODOs
 0.0.0 2021-11-16T03:00Z Placeholder for addressing C/C++ lore and useful
       resources.

                     ***** end of T060101.txt *****
