tools.txt 0.0.25                   UTF-8                       dh:2022-07-**
----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*


                        nfoWare/nfoWorks nfoTools
                        =========================

    <https://github.com/orcmid/nfoTools/blob/master/docs/tools/tools.txt>
        <https://orcmid.github.io/nfoTools/tools/tools.txt>

                       NFOTOOLS TOOLCRAFT NOTEBOOK
                       ---------------------------

    nfoTools docs/tools/ is for documenting understandable and reusable use
    of featured tools.  More on the nature of toolcraft is provided at
    <https://orcmid.github.io/nfoTools/notes/N070801/>.

MANIFEST

    tools.txt
          this manifest and job-jar file
    index.md
          front-page authoring for <https://orcmid.github.io/nfoTools/tools/>

  T211102/ Git and GitHub
  T211101/ raylib Library for Graphical apps
  T211002/ Visual Studio Build Tools
  T211001/ Visual Studio Code

  T060501/ Windows CMD Command-Line Environment
  T060101 C/C++ Programming

  T000000/ nfoWare Tool Notes Diary and Job Jar (preservation capture)

 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

                    Copyright 2021-2022 Dennis E. Hamilton

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*

 ATTRIBUTION

   Hamilton, Dennis E. nfoTools Toolcraft Notebook.  nfoTools project text
   file tools.txt version 0.0.23 dated 2022-06-19, available on the Internet
   as a version of
   <https://orcmid.github.io/nfoTools/tools/tools.txt>

TODO

 * Figure out the situation with Git for Windows being so beginner painful
   to install.

 * Emphasize on-ramps, prerequisites, and the worked cases on how to install
   various tools and make use of them.

 * Recommend VS Code or editor first, then GitHub for Windows, then
   TortoiseGit and GitHub Desktop, then VIsual Studio Developer Tools or
   Community Edition -- RETHINK AND CONFIRM A GOOD SEQUENCE

 * Need Visual Studio Developer Tools first for Developer Command Prompt
   and launching of code by command prompt

 * Finding the install location of VC and C/C++ Build tools will be
   important.  Promote the shortcut access and reuse.

 * Not certain about when we get farther into keyboards as tools, especially
   on the digital, computer-system side.  Maybe start on skills, then more
   here on toolcraft of it?  Yup.

 * Add tools entries for hashing (sha256check) and verifying digital
   signatures, then how to create them.  Documentation should always cover
   usage first, creation secondly, in progressive disclosure.

 * Deal with VS 2019 and VS 2017 installation and also detection.  Unclear
   about 2015 and earlier any longer.  There is the need to be able to rebuild
   and test and to patch that may require continued support of those releases.

 * Resolve the CMD Command Prompt situation as follows.  We will speak of the
   command-line ENVIRONMENT that CMD establishes.  Then things like VC/C++
   Tools and the customization of the environment fits in.  Also, the general
   terminal/console model can be spoken of separately, in a combination of
   notes and specific toolcrafts, including developing-for, not just
   developing-in.  Create projects for this.

 * Need to distinguish Terminal and Console, both in usage and when developing

 * Contrast with GUI environments with respect to similarities and differences

 * We need toolcraft for the VC Build Tools, especially cl.exe and the
   way options work.  This may extend to other tools in that family.  Check
   the prompts for the other tools.  Also, this impinges on things like the
   options and and use of *.opt files in VCbind, VCrapApp, etc.

 * We need to introduce Windows Terminal and how to deal with cmd.exe as the
   default or an initialized case in Windows Terminal.  It looks like we need
   folio progressions for some of these.

 * An article on employing Windows Terminal as of 2022-10-18,
   <https://www.computerworld.com/article/3676596/how-to-manage-and-customize-windows-terminal.html>

 * Triage T060301 Computer Arithmetic Gotchas

 * Triage T060302 Using VC++ 2005 Express Edition

 * Triage T170201 Construction Sets

 * Triage T170301 WinCon Construction Sets

 * The Construction Kits might be something other than Toolcraft.  Think
   it over.  This looks like there are the /dev presences at the individual
   technical level, but maybe tools on accomplishing project with the devkits.
   I can imagine that for the treatment of VC++ and also cases of library use
   such as raylib.

 * Add a level on devKit Construction Sets at the WinDev level, since
   there are now more flavors.  This is a generic case about what these are
   and how they are to be handled when encountered.  Also, what one can
   expect to see in the accompanying text file, and what to check. Other
   languages might be indicated as well.  This needs to be anticipated.

 * There needs to be a structure for how one determines a later version is
   available and whether it should be used in the place of one found in a
   project, what to do about git handling, etc., separate from customization
   in the incorporating project.  There is toolcraft around all of this with
   respect to nfoTools.  How that interacts with provisions of other projects
   is a separate matter.

 * Look into what must be figured out around CL.exe that shows up in the
   rayLab rawCL script development (now VCrayApp).  This has to do with
   the option files and how they work.

 * Watch FC_CPP and ensure that supporting materials are appearing here on
   nfoTools/docs.

 * "Coding standards" and following the standards of of a project being
   contributed to are important.  Do the { ...} case.

 * There are two cases.  Explaining what practices are being observed, and
   how they are meant to be useful.  There is a lot of that here on nfoTools
   itself, and also in nfoTools/docs.  Some is docEng.  Some is craft.

 * There is also explanation of project conventions and ensuring that any
   issues, discussions, and pull requests conform to the project standards.

 * The material difference between C and C++ library/external linking needs
   to be made clear.  First, the difference, and how it is revealed in
   headers and source codes.  And how there are even more cases, such as
   the entry-exit conventions in calling that are not quite orthogonal.
   This is partly a Build Tools conversation, and also one about C/C++
   programming.  Reflect that everywhere it matters.

 * An useful reference on the C-like languages and variability.  Hopefully
   with good links
   <https://www.codecademy.com/resources/blog/c-vs-cplusplus-vs-csharp-vs-objective-c/>

 * There needs to be consideration of tools like Blender, if only for a
   high-level look and links to available materials.

 * Tools for UI and UX will also be relevant, more than just raygui.  That
   will take some rationalization of levels of abstraction and where tools
   fit into development processes (primarily on Windows for Windows).

 * Explore Figma as a prospective tool provided that it is available free.
   <https://www.codecademy.com/resources/blog/learn-how-to-use-figma-in-our-intro-to-ui-and-ux-design/>.
   Figma has free accounts and is web-based.  The last might not be what we
   have in mind for a good tool.

 * Update the folio-page heading strip to follow the original model better.

 * <https://www.gamedev.tv/courses/extra/lectures/12335656> is a great lecture
   on how to learn a game engine.  The same applies to how to learn how to
   use Build Tools before letting Visual Studio do it for you with the
   scripts it creates.

 * On IDEs, there is an interesting survey article.  The choices are not
   detailed very well,  though it is interesting that Visual Studio is listed
   first <https://www.techrepublic.com/article/best-ide-software/>.

 * We need to explain a little about IDEs and the bigger issue (with VS) on
   how there is a particular model for builds, debug versus release, and
   composing solutions/projects and how configurations are handled.

 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 0.0.24 2022-06-21T16:52Z Capture Ben from Gamedev.tv on how to learn
 0.0.23 2022-06-19T15:36Z Manage TODOs, track header construction
 0.0.22 2022-04-15T15:35Z Add notes about UI and UX tool coverage
 0.0.21 2022-04-09T15:06Z Manage TODOs, consider WinDev level Construction
        Set devkits explanation here
 0.0.20 2022-04-08T22:52Z Manage TODOs, muse on dev vs. tools for devkits
 0.0.19 2022-03-15T14:51Z Manage TODOs
 0.0.18 2021-11-23T16:29Z Anticipate T211102 again, manage TODOs
 0.0.17 2021-11-16T16:28Z Continue Triage from nfoWare, TODOs
 0.0.16 2021-11-12T18:06Z Rhapsodizing TODOs
 0.0.15 2021-11-12T00:18Z Anticipate T211101 and T211102
 0.0.14 2021-10-27T20:06Z Manage TODOs, add T211002 on VS Build Tools
 0.0.13 2021-10-22T17:07Z Manage TODOs around VS Code and interdependent tools
 0.0.12 2021-10-13T14:41Z Manage TODOs, add attention to conventions/standards
 0.0.11 2021-10-04T19:47Z Manage TODOs, anticipating VS Build Tools toolcraft
 0.0.10 2021-09-28T14:46Z Expanded TODOs including triage from nfoWare
 0.0.9 2021-09-15T16:17Z Resolve nomenclature around ommand-line environments.
 0.0.8 2021-09-15T03:46Z Manage TODOs around versions of Visual Studio
 0.0.7 2021-09-12T19:19Z Links to N070801, Manage TODOs
 0.0.6 2021-09-07T03:25Z Touch up, let N070801 become the Craft of Toolcraft.
 0.0.5 2021-09-05T17:34Z Introduce T060501
 0.0.4 2021-09-05T16:24Z Move basic keyboarding to S210902, Touch-up TODOs
 0.0.3 2021-09-05T15:54Z Keyboard stuff
 0.0.2 2021-09-02T20:32Z Introduce index.md.  Manage TODOs.
 0.0.1 2021-08-30T19:01Z add ruler
 0.0.0 2021-08-30T04:27Z Placeholder for the introduction of toolcraft
       folios.

                     ***** end of tools.txt *****
