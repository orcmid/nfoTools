WinDev.txt 0.0.1l                     UTF-8                     dh:2021-11-15
----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*

  <https://github.com/orcmid/nfoTools/blob/master/devKits/WinDev/WinDev.txt>

                 WINDEV: TEMPLATES, KITS, AND HELPERS ON WINDOWS
                 ===============================================

    The WinDev/ construction kits and helpers are for creation of construction
    sets that build Windows programs using Microsoft developer tools on
    Windows.  There is focus on minimum tooling requirements, especially for
    reproducing the builds of various tools and straightforward apps.

    This area is for the development, confirmation, and packaging of these
    artifacts.  The public availability of distributions and their usage is
    treated under docs/dev <https://orcmid.google.io/nfoTools/dev/> topics.

MANIFEST

    WinDev.txt
        This description file on organization of the archive and use of its
        materials.

    VCbinder/
        Kit for introduction of VCbind as a helper in construction sets
        that produce Windows programs using Visual Studio Build Tools in a
        Windows command shell session.

    VCrayApp/
        Template for building Windows applications using the raylib library
        for graphical applications.

    WinConKit/
        Kit for construction sets that build C/C++ Windows Console applica-
        tions using Windows command shell sessions. These include projects
        for command-line games and utilities as well as ones that provide
        simple graphical operation.


 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

                       Copyright 2016 Dennis E. Hamilton

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*

 ATTRIBUTION

   Hamilton, Dennis E. Templates, Kits, and Helpers on Windows. nfoTools file
   WinDev.txt version 0.0.11 dated 2021-11-15, available on the Internet as a
   version of
   <https://github.com/orcmid/nfoTools/blob/master/devKits/WinDev/WinDev.txt>

TODO

 * Adjust VCbinder/ for its new location

 * Update VCbinder to reflect the reality of Visual Studio Build Tools
   "discoverability" starting with VS 2017.

 * Update the WinConKit case so that a simple handling of configuration
   cases can work with a single workspace setup in Visual Studio Code.

 * Transform the seed material from Adv10/dev/WinCon as the initial
   skeleton for WinConKit/ if that is still needed.  This should have been
   down with a fork here or there or both.

 * There is some dependency management to be addressed here.  In particular
   the stable versions (and the branches that preserve them) need to be
   clearly separated from the in-progress working versions.

 * The sources of a distribution should be in the same folder that has the
   binaries of the same distributions.  Implement that in VCbinder.  Remember
   what this item is about.

 * We need to look into dependencies when one is developing and what they
   might change to in a stable construction set.  I suppose the intriguing
   case is when one is building with a working version of a dependency in
   anticipation and testing for its eventual deployment.  The target of
   the dependency changes in that case. This somehow needs to be sheltered
   away from how a deployed WinDev Construction Set is meant to work.  And
   also how and when it is updated for later/different versions of
   dependencies.  There needs to be more thought on how we differentiate this
   as an SE4E consideration.  The use of canned .zip components for the
   stable bits is valuable.  It is not the whole story.  PS: This is more of
   a devKits discussion, but it will show up real quick here in WinDev.

 * DISCOVERABILITY ISSUES. The deployment of Visual Studio and of Microsoft
   Build Tools has changed in ways that defeat discovery of installed tools
   by VCbind.  The appearance of settings that cue location of build tools is
   no longer at the command-line session level.  To locate tools now, users
   must rely on Windows-installed Command Prompts and operate inside those
   console-session initiations.  VCbind must be adusted to operate when any
   of those prompts have been established.  This also requires approaches to
   compilation from within developer tools such as Visual Studio Code and Code
   being initiated from within such a console session.

 * COLLISION AVOIDANCE.  There are times when ephemeral materials and user-
   customizations are to be made in the use of a cloned kit-employing project.
   The areas where such materials are introduced are subject to .gitignore of
   the cloned project when they are internal to the cloned materials. Users
   must have a way to include those adaptations in git-managed projects of
   their own without impacting the cloned kit-employing project.  Thisalso
   means that the kit-employing project must have a clean way to deal with
   breaking changes that impact existing customization.  This needs to be
   handled in a manner that does not involve over-thinking the situation,
   while relying on straightforward (maybe tedious) procedures.

 * DISTINGUISH CLONE CONTANIMATION.  When a kit-using project is cloned, it
   must not be contanimated by the configuration choices made in use of the
   clone.  Local customizations must be kept local since they should not
   push to the origin.  I need to be clear about this and also have a good
   diagram of the model.  There also needs to be a good model for a deep-dive
   into how VC and Visual Studio Build tools operate.  This is not unlike
   what happens with MingW GCC, etc.  The question is how to get this placed
   properly for progressive disclosure.

 * UPDATE CONSIDERATION.  When an user introduces an updated Kit, there need
   to be clean ways to migrate the existing reliance on an earlier version
   or even working without a kit.  Must find ways not to trample on existing
   user work while also providing a confirmable migration experience.

 * Work on retirement of VCbind 0.2.0.  There needs to be a VCbind 1.0.0 that
   fits with the current VS Build Tools reality and dependence on command-line
   environments being set up.  Blend with VCrayApp. See docs/dev/ too.

 * There's a pattern to WinDev (maybe devkit level) that might deserve being
   accounted for, probably under dev/ and not tools/.  Yes, definitely.

 * Add VCrayFarm as the model and setup for a grouping of VCrayApp projects
   all using the same raylib/ but each having their own cache/, app/, src/
   etc.

 * Figure out the use of VCrayNest, VCrayFarm, VCrayTest, VCrayLand,
   VCrayLab, and any other VCray thingies.  Need to focus on which tools we
   mean for what.  Also VCraySet, VCrayNest, VCrayLair

 * The current VCrayNest model using VCrayApp template (included in the dist)
   Tends to have each fledgling with its own cache.

 * A good VCrayTest would provide for cycling through testcases and also
   reporting success.  Could run quiet or with away to select the test or
   example to demonstrate.

 * There needs to be a good account of C vs C++ and then how to navigate the
   dependencies.  And also what language to use.  When would we want C++ and
   for that matter, why/when not .NET?


----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*

 0.0.11 2021-11-15T19:11Z Manage TODOs regarding VCrayMumbling
 0.0.10 2021-11-15T00:12Z Tidying about purpose and reviewing TODOs
 0.0.9 2021-11-12T18:20Z TODO musings plus adding VCrayApp as a Kit/Template
 0.0.8 2021-09-10T21:44Z add attribution
 0.0.7 2021-08-30T19:06Z add rulers
 0.0.6 2021-08-11T15:48Z Adjust Discoverability, Add Collision Avoidance,
       and manage TODOs.
 0.0.5 2021-05-25T15.14Z Report the discoverability problem.  Touch ups.
 0.0.4 2021-02-13T23:21Z Use correct permalink for this page.  Smooth text.
 0.0.3 2016-12-08-09:36 Considerations about dependencies and also source
       bundling with -dist versions.
 0.0.2 2016-11-30-20:47 Adjusted VCbinder/ and created initial WinConKit\
       as subordinate folders.
 0.0.1 2016-11-30-16:12 Provide initial description and incorporate VCbinder\
       and WinConKit\ in the manifest.
 0.0.0 2016-11-30-15:56 Clone from devKits.txt 0.0.1 for morphing into the
       equivalent for WinDev.

                         *** end of WinDev.txt ***
