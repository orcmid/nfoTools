VCrayVerify-0.0.0 dev.txt 0.0.9     UTF-8                         2023-04-18
*---|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*

<https://github.com/orcmid/nfoTools/blob/master/devKits/WinDev/VCrayVerify/dev/dev.txt>

        DEVELOP VCRAYVERIFY TEST HARNESS FOR VERIFYING RAYLIB EXAMPLES
        ==============================================================

    On GitHub, this folder is for the development, confirmation, and packaging
    of a VCrayVerify test suite.  This dev.txt file is incorporated in the
    VCrayVerify-0.0.0.zip package and extracted folder for reference and
    historical purposes.  VCrayVerify-0.0.0 is definitely an alpha and proof-
    of-concept release.  There are raylib\examples\ cases that may not be
    ameanable to building with a simple VCrayAppV and pure VCrayApp building.

    The structure of this folder is that of the intended test suite, apart
    from those components, such as a raylib source release, that must be
    obtained from elsewhere.  VCrayVerify is tested and developed in place
    in a GitHub folder and then the release content is separate out into the
    distributable VCrayVerify-0.0.0.zip.  For this and later releases, see
    <https://orcmid.github.io/nfoTools/dev/D230202/>.

    A VCrayVerify folder will have its own raylib\ subfolder with an adjacent
    VCrayApp\ adaptation.  This keeps VCrayVerify operation separate from any
    use of raylib\ and VCrayApp for other purposes, especially where official
    stable releases are preferable.  VCrayVerify provides for verification
    with a variety of raylib releases, including clones of the current
    under-development raylib\ release.

    VCrayVerify might use VCrayAppV\src\ as the location where copies of
    examples and other source codes are placed for compilation sometimes.
    The app\ folder will receive compiled examples and and resources\
    subfolder for examples that expect one at runtime.

    Generally, VCrayVerify runs much like VCrayApp except for the selection
    of examples to (attempt to) build and run.  VCrayVerify versions are used
    to adjust to new raylib\ and raylib\examples\ situations, and also such
    matters as VS Build Tools changes that impact support of C/C++ features.

    The development and staging of releases is along the same lines used for
    VCrayApp releases.  There will be a similar checklist.

MANIFEST

    dev.txt
        This description file on organization of the folder and use of its
        materials.

    CHALLENGES.txt
        File documenting challenges that need to be overcome with some
        raylib\examples\ cases.

    VCrayVerify-0.0.0.txt
        The synopsis, read-me, and manifest for VCrayVerify 0.0.0
        A signed version is available separately as as part of the
        VCrayVerify-0.0.0.zip and for independent examination from the
        release download page.

    VCrayVerify.bat
        The batch script for operation of VCrayVerify verifications of
        the raylib\example\ files and potentially others

    VCrayVerLast.bat
        A script for recording the version determined on the last cache
        creation of project VCrayAppV.

     NOTICE.txt
        Notification applicable to the VCrayVerify content

    VCrayAppV\
        The VCrayApp 0.1.0 beta release candidate that is used
        for the compiling-and-run step of each verification.  This is a pure
        VCrayApp 0.1.0 setup with accomodation of embedded operation for
        working under VCrayVerify without any modifications required.

    raylib\ (not delivered, not under VCrayVerify source-control)
        An extracted raylib version (or developer clone) to verify, located
        as a peer of VCrayAppV\ as required for VCrayApp operation.

*---|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*

                    Copyright 2022-2023 Dennis E. Hamilton

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

*---|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*

 ATTRIBUTION

   Hamilton, Dennis E. Develop VCrayVerify Test Harnesses for Verifying
   raylib Examples, version 0.0.9 dated 2023-04-18, available on the Internet
   as a version of
   <https://github.com/orcmid/nfoTools/blob/master/devKits/WinDev/VCrayVerify/VCrayVerify.txt>

TODO

 * Provide for cycling through testcases and also
   reporting success.  Could run quiet or with away to select the test or
   example to demonstrate.

 * I have decided to create VCrayVerify for the specific task of running
   raylib\examples\ progressively through a VCrayApp series with a setup and
   batch script.  In this case, it works by moving the examples into the
   VCrayAppV setup as necessary. Various challenges will be found and resolved
   in VCrayVerify development.

 * This might be an example that can be morphed into test suites for other
   application developments.

 * VCrayVerify.bat will have similar initial parameters to VCrayApp.  The
   internal calls on VCrayApp.bat will all use "+" and any "*" will be passed
   through from VCrayVerify.  It might be that we want terse all of the time
   in the hosted operation, VCrayAppV.  I think it will depend on whether we
   know what is being compiled and can tell what failures look like in the
   command prompt.

 * When -c is used with VCrayVerify, it will do a cache build at the beginning
   but not for subsequent operations in the same sequence of runs.

 * When -r is used with VCrayVerify, it will cause the runs to occur.
   Otherwise, the setup is confirmed without compilation. This is a problem.
   We always want to run, so it is unclear what this means.  Going through
   just to test compiles seems odd although it could be done that way.  Needs
   more thought.

 * The default operation is to confirm operation and then present the usage
   information.

 * There is a way to specify one of the 9 raylib\example\ subfolders.  There
   is a way to specify any of the individual programs having a VCrayVerify
   case.

 * There is a way to do only what is specified or to continue from what is
   specified.

 * VCrayVerify.bat must have careful provisions for ensuring that the
   app\resources\ folder is the correct one, if any, for the case about to
   be verified.

 * Check whether xcopy is available and usable for many of the operations

 * Determine where .vscode goes, even if not packaged in the deliverable.

 * Leave this dev.txt as a component of VCrayVerify so that history is
   packaged with this kind development.

 * I'm not thrilled about having a VCrayAppV folder although the idea is to
   have a project name.  It would work with a simple VCrayApp folder name.
   However, room for customization is available with VCrayAppV.

 * Solve the problem of needing to know raylib versions even if the cache is
   previously built by having a file that holds a SET command from the last
   VCrayAppV cache build.  The file is initially absent.  The -c option will
   cause that file to be deleted.  The filling of the cache will be triggered.
   On a successful cache creation, the file VCVrayVerLast.bat is created to
   provide the raylib version that was used, as reported by VCrayAppV.

 * The value of VCrayVerLast should be reported somehow during operation in
   cases where the cache is not rebuilt, serving as a reminder.

 * The -v option should be used to view the PNGs that go with the chosen
   examples.

 * Create a CHALLENGES.txt file that works through challenges found in the
   example folders, and the workarounds, if any, that are put in place.  Some
   have already been found in eyeballing raylib\examples\ materials.

*---|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*

 0.0.9 2023-04-18T15:57Z Update TODOs, add CHALLENGES.txt
 0.0.8 2023-04-18T17:11Z Remove VCrayAppV-prologue.txt and update of manifest
 0.0.7 2023-03-22T03:46Z Introduce VCrayVerLast.bat and more TODOs
 0.0.6 2023-03-10T18:38Z Adjust for using the VCrayApp 0.1.0 draft candidate.
 0.0.5 2023-02-27T18:13Z Manage TODOs, consider VCrayApp customization
 0.0.4 2023-01-22T17:31Z Touch-ups and Manage TODOs
 0.0.3 2023-01-22T16:03Z Touch-ups and Manage TODOs
 0.0.2 2023-01-17T02:00Z Bring Manifest current
 0.0.1 2023-01-17T01:34Z Initial Text and TODOs
 0.0.0 2023-01-15T18:02Z Clone from VCrayNest.txt 0.0.1 to establish the
       VCrayVerify folder.

                       *** end of dev.txt ***
