WinConKit.txt 0.0.3                   UTF-8                         2016-12-08

              <https://github.com/orcmid/nfoTools>
                     /devKits/WinDev/WinConKit/WinConKit.txt>

              NATIVE WINDOWS CONSOLE APPLICATION CONSTRUCTION KIT
              ===================================================

    Windows Console Construction Sets are for C/C++ console applications
    running in the native Windows Command Shell.  The building of the
    program is accomplished using Microsoft command-line Development Tools.
    
    WinCon Construction Kits include a number of components and customization
    procedures leading to a WinCon Construction Set for building, testing,
    and deploying a console program.
    
    This directory holds the latest stable version as a way of preserving
    an intact version that others can depend on.  In-progress development
    of other versions happens in subordinate folders.
    
    Previous older versions have identified Branch names for recovery from
    the source-code repository.  Stable releases are also found at 
    <http://nfoWare.com/dev/2016/11/d161103.htm>.
    
    
PREREQUISITES

    [TBD]
    
DEPENDENCIES


    
   
MANIFEST

    .gitignore (applicable here and in a WinCon Construction Set)
        Ignoring folders that are created only for construction activity
        and not intended as part of the maintained source tree.  This
        prevents local customizations of working material from infecting
        the shared public source-code tree.

    WinConKit.txt
        This description file on organization of the construction kit
        and use of its materials.
        
    VCenable.bat (from VCbinder)
        script for performing a VCbind operation using the extracted 
        VCbind.zip; the extraction is confirmed and then the VCbind.bat
        in the extracted material is performed.
        
    VCbind-0.1.0.txt (from VCbinder)
        manifest and instructions from VCbind.zip available for review
        before extracting VCbind.zip.
        
    VCbind.zip (from VCbinder)
        package which provides the working VC binding script when extracted
        to VCbind/ here.  
       
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

                       Copyright 2016 Dennis E. Hamilton

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

TODO

 * Is it better to include VCbinder in this kit, rather than include the
   bits?  The dependency needs to be clear if VCbinder is not directly here.
   It becomes a case of dependency management to look at from an SE4E
   perspective.  It figures in how provenance is maintained when someone
   updates the VCbinder bits in a construction set that was originally form
   a WinConKit.
   
 * WinConKit is going to be a parking place for stable versions.  This is
   part of a practice on managing dependencies between stable (-dist)
   versions and in-progress development versions.  
   
 * There should be no copies of dependent packages here until dependency
   management is figured out better.

 * Tie this to examples of where the Kit is used/developed.  
 
 * We will use an indirect level.  WinConKit/ is for deployment staging
   and fixing a branch.  This is redundant with the nfoWare site's deployment, 
   and that's no crime, just as for VCbinder VCbind.
 
 * Tie to the WinConKit web presence and where distributions will be 
   provided.
 
 * Work up the Visual C++ console compilation case.
 
 * For the scripts that are customized in the WinConKit components, the 
   ideal case is to treat naming by parameter definition in the scripts,
   with the bodies of the scripts kept stable.  The customization of 
   material that is not location/name dependent, such as .opt files is
   more straightforward.
   
 * An interesting case involves finding some sort of automated integration
   for updating of a deployed construction set.  That may be too difficult
   because of customizations.
   
 * The above question applies to constructing construction *kits* too.
 
 * WinConBuild/ for doing it all using the command line.
 
 * Specify how the CL.exe command line parameters and options are 
   customized.
 
 * Add WinConRun for running the result of a WinConBuild (or VS/VC project?)
 
 * Add VSproject/ for doing all of this with Visual Studio.
 
 * Consider VScode for using Visual Code if we can get the workspace to
   work the way we need.  It does not appear that Visual Code compiles will
   work well with the code in a different place than where the build happens.
   There is also a problem with the code being in a different location than
   the workspace.  
 
 * Evaluate whether the CLang front end is an useful alternative.
 
 * Add anything about developing/maintaining WinConKit.
   This can be by appropriate pointers.
   
 * It is not clear whether and how Micosoft Visual Studio Team Services
   online is helpful here, especially for WinCon builds.  However, figuring
   out Release Management and integration with Visual Studio Code are all
   interesting cases.  <https://www.visualstudio.com/team-services/>.
   
 * There may need to be more layering here because of how packaging of piece
   parts may need to be worked up (e.g., in additional Zip files).
   
 * Work through this and have a statement somewhere about what has actually
   been tested:
        - Visual Studio Community 2015 with Update 3 (VS 14.0 C++ features)
     - Visual Studio Express 2015 for Windows Desktop (VS 14.0 C++ features)
     - Visual C++ Build Tools 2015 Update 3 (VS 14.0 C++ features)
     - Visual Studio Express 2013 for Windows Desktop Update 5 
       (VS 12.0 C++ features)
     - Visual Studio 2012 Express for Windows Desktop (VS 11.0 C++ features)
    Probably Obsolete and no longer available for download: 
     - Visual Studio 2010 Express (VS 10.0 C++ features, via Studio 2010 SP1 ?)
     - Visual Studio Express 2008 (VS 9.0 C++ Express features)
     - Visual C++ Express 2005 (VS 8.0 C++ features)
   
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 0.0.3 2016-12-08-09:35 More notes on deployment issues and trickling up
       to WinConKit/ from deeper working-development levels.
 0.0.2 2016-12-04-12:40 Further Adjustments.  Import more notes from Adv10
       that belong here instead of a derived (or prototype) construction set.
       Identify VCenable.bat as the kickoff for the tool chain.
 0.0.1 2016-11-30-20:45 Initial customization for WinConKit.
 0.0.0 2016-11-30-16:43 Initial Placeholder from the WinCon.txt 0.0.8 file
       in the Adv10/dev/WinCon/ construction set.

                          *** end of WinConKit.txt ***        
